import ReactMarkdown from 'react-markdown';
import {useEffect, useState} from "react"
import {
  MainButton,
  useCloudStorage,
  useHapticFeedback, useInitData,
} from "@vkruglikov/react-telegram-web-app";
import {useNavigate} from "react-router-dom"
import Header from "../components/Header.jsx"
import CodeBlock from "../components/CodeBlock.jsx";
import AnswerItem from "../components/AnswerlItem.jsx";
import ExplanationBlock from "../components/ExplanationBlock.jsx";
import axios from "axios";
import pitGreeting from "../assets/pit-greeting.png";

const SolveQuestionPage = () => {
  const navigate = useNavigate()
  const storage = useCloudStorage()
  const [InitDataUnsafe, InitData] = useInitData()
  const [selectedAnswer, setSelectedAnswer] = useState(null)
  const [impactOccurred, notificationOccurred, selectionChanged] = useHapticFeedback()
  const [showExplanation, setShowExplanation] = useState(false);
  const [newQuestion, setNewQuestion] = useState(null)
  const [noMoreQuestion, setNoMoreQuestion] = useState(false)
  const [loading, setLoading] = useState(true);
  const [userAnswer, setUserAnswer] = useState(null)

  const fetchNewQuestion = async () => {
    try {
      const response = await axios.post(
        `${import.meta.env.VITE_REACT_APP_API_URL}/api/v1/questions/get-new-question`, {
        user_init_data: InitData,
      })
      setNewQuestion(response.data)
    } catch (err) {
      console.error(err)
      setNoMoreQuestion(true)
    } finally {
      setLoading(false);
    }
  }

  const answerQuestion = async (questionId, answer) => {
    try {
      const response = await axios.post(
        `${import.meta.env.VITE_REACT_APP_API_URL}/api/v1/questions/answer`, {
        user_init_data: InitData,
        question_id: questionId,
        user_answer: answer
      })
      setUserAnswer(response.data)
    } catch (err) {
      console.error(err)
    }
  }

  const correctExplanationTitles = [
    "–ë—Ä–∞–≤–æ! –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! ü§ù",
    "–ò —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚úÖ",
    "–¢–æ—á–Ω–æ –≤ —è–±–ª–æ—á–∫–æ! üéØ",
    "–£—Ä–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ",
    "–í–µ—Ä–Ω–æ! –¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å! üöÄ",
    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üëç",
    "–¢–∞–∫ —Ç–æ—á–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —É—Ä–∞! üèÜ",
    "–í–µ—Ä–Ω–æ! –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è! üòâ",
    "–î–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üëå",
    "–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üåü"
  ]
  const randomCorrectExplanationTitle = Math.floor(Math.random() * correctExplanationTitles.length);

  const incorrectExplanationTitles = [
    "–û–π-–æ–π, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ç–æ—Ç –æ—Ç–≤–µ—Ç üòØ",
    "–£–ø—Å, –º–∏–º–æ! üôä",
    "–û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞ üôà",
    "–ù–µ —É–≥–∞–¥–∞–ª! üôÖ‚ÄçÔ∏è",
    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ —Ç–∞–∫ üö´",
    "–ù–µ —Ç–æ—Ç –æ—Ç–≤–µ—Ç, –¥—Ä—É–≥ üïµÔ∏è‚Äç‚ôÇÔ∏è"
  ]
  const randomIncorrectExplanationTitle = Math.floor(Math.random() * incorrectExplanationTitles.length);

  const enoughQuestionsForTodayTexts = [
    `–°–µ–≥–æ–¥–Ω—è ‚Äì –≤—Å—ë! –ñ–¥–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—É—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é Python —É–∂–µ –∑–∞–≤—Ç—Ä–∞‚ö°Ô∏è
    –¢—ã –º–æ–∂–µ—à—å –¥–∞–ª—å—à–µ-–±–æ–ª—å—à–µ! –ö–∞–º–æ–Ω, —ç–≤—Ä–∏–±–∞–¥–∏ –ø—É—á–µ—Ö–µ–Ω–∑–∞–ø üí•`,
    `¬´–î–ª—è —Å—Ä–µ–¥—É–ª—å–∫–∏ —Ö–≤–∞—Ç–∏—Ç!¬ª –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∫–∏ —É–∂–µ –∑–∞–≤—Ç—Ä–∞‚ö°Ô∏è`,
    `–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë! –ó–∞–¥–∞—á–∏ –∂–¥—É—Ç —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞, –∞ –ø–æ–∫–∞ –æ—Ç–¥—ã—Ö–∞–π –∏ –Ω–∞–±–∏—Ä–∞–π—Å—è —Å–∏–ª üîã`,
    `–ë–µ–ª–∏—Å—Å–∏–º–æ ü§å –ó–∞–≤—Ç—Ä–∞ –∂–¥–∏ –Ω–æ–≤—ã–µ –∫—Ä—É—Ç—ã–µ –∑–∞–¥–∞—á–∏!`,
    `–¢—ã –º–æ–ª–æ–¥–µ—Üüåü –ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ!`,
    `–°–µ–≥–æ–¥–Ω—è –≤—Å–µ! –° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞üëã`,
    `–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ, –æ—Ç–¥—ã—Ö–∞–π! –ê —è —É–∂–µ –≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ü§©`
  ];
  const randomEnoughQuestionsForTodayText = Math.floor(Math.random() * enoughQuestionsForTodayTexts.length);

  const handleAnswerClick = async (answer) => {
    if (selectedAnswer === answer) {
      setSelectedAnswer(null)
      selectionChanged()
      await storage.removeItem("selectedAnswer")
      return
    } else if (selectedAnswer) {
      setSelectedAnswer(answer)
      selectionChanged()
    } else {
      setSelectedAnswer(answer)
      notificationOccurred("success")
    }
  }

  const handleMainButtonClick = async () => {
    await answerQuestion(newQuestion.id, selectedAnswer)
    setShowExplanation(true);
  };

  const handleMainButtonClickAfterExplanation = async () => {
    setSelectedAnswer(null)
    if (userAnswer?.achievements && userAnswer.achievements.length > 0) {
      navigate('/new-achievement', { state: { achievements: userAnswer.achievements } });
    } else {
      window.location.reload()
    }
  };

  const handleToProfile = () => {
    navigate('/profile');
  };

  useEffect(() => {
    fetchNewQuestion()
  }, [])

  if (loading) {
    return (
      <>
        <div className="landing-page">
          <p className="landing-page__text">Loading...‚è≥</p>
        </div>
      </>
    )
  }

  if (noMoreQuestion) {
    return (
      <div className="landing-page">
      <Header title="Python bot" className="header choose-item"/>

        <div className="landing-page__logo">
          <img
            className="logo"
            src={pitGreeting}
            alt="Pit Logo"
          />
        </div>
        <p className="landing-page__text">
          {enoughQuestionsForTodayTexts[randomEnoughQuestionsForTodayText]}
        </p>
        <button onClick={handleToProfile} className="start-button button">
          –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ
        </button>
      </div>
    );
  }

  return (
    <>
      <div className="choose-item">
      <Header title="Python bot" className="header choose-item"/>
          <ReactMarkdown>
            {`## ${newQuestion.question_text}`}
          </ReactMarkdown>
          {newQuestion.code_block && (
            <CodeBlock
              codeString={newQuestion.code_block}
            >
            </CodeBlock>
          )}

        {!showExplanation ? (
          <main className="main_answer">
              {Object.entries(newQuestion.choices).map(([key, value]) => (
                <AnswerItem
                  key={key}
                  answerText={value}
                  onClick={() => handleAnswerClick(key)}
                  className={selectedAnswer === key ? "answer_item answer_item--active" : "answer_item"}
                >
                </AnswerItem>
              ))}
          </main>
          ) : (
            <ExplanationBlock
              explanation={newQuestion.explanation}
              correctTitle={correctExplanationTitles[randomCorrectExplanationTitle]}
              incorrectTitle={incorrectExplanationTitles[randomIncorrectExplanationTitle]}
              userAnswer={newQuestion.choices[selectedAnswer]}
              correctAnswer={newQuestion.choices[newQuestion.answer]}
              isCorrect={userAnswer.is_correct}
            >
            </ExplanationBlock>
          )
        }
      </div>

        {selectedAnswer && (
          <MainButton
            text={showExplanation ? "–î–∞–ª–µ–µ" : `–û—Ç–≤–µ—Ç–∏—Ç—å ${selectedAnswer}`}
            onClick={showExplanation ? handleMainButtonClickAfterExplanation : handleMainButtonClick}
          />
        )}
    </>
  );
}

export default SolveQuestionPage
