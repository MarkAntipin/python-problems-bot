import ReactMarkdown from 'react-markdown';
import {useEffect, useState} from "react"
import {
  BackButton,
  MainButton,
  useCloudStorage,
  useHapticFeedback,
  useShowPopup
} from "@vkruglikov/react-telegram-web-app";
import {useNavigate} from "react-router-dom"
import Header from "../components/Header.jsx"
import CodeBlock from "../components/CodeBlock.jsx";
import AnswerItem from "../components/AnswerlItem.jsx";
import ExplanationBlock from "../components/ExplanationBlock.jsx";

const SolveQuestion = () => {
  const navigate = useNavigate()
  const storage = useCloudStorage()
  const showPopup = useShowPopup()
  const [selectedAnswer, setSelectedAnswer] = useState(null)
  const [impactOccurred, notificationOccurred, selectionChanged] = useHapticFeedback()
  const [showExplanation, setShowExplanation] = useState(false);


  const codeString = `
import logging
handler = logging.FileHandler('myapp.log')
formatter = logging.Formatter(
  '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
 )
handler.setFormatter(formatter)
`;
  const question = "## –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?"
  const explanation = "–≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ `FileHandler` –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª `myapp.log` –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤\\."
  const explanationTitle = "–ë—Ä–∞–≤–æ! –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! ü§ù"
  const correctExplanationTitles = [
    "–ë—Ä–∞–≤–æ! –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! ü§ù",
    "–ò —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚úÖ",
    "–¢–æ—á–Ω–æ –≤ —è–±–ª–æ—á–∫–æ! üéØ",
    "–£—Ä–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ",
    "–í–µ—Ä–Ω–æ! –¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å! üöÄ",
    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üëç",
    "–¢–∞–∫ —Ç–æ—á–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —É—Ä–∞! üèÜ",
    "–í–µ—Ä–Ω–æ! –£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è! üòâ",
    "–î–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üëå",
    "–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üåü"
  ]
  const randomCorrectExplanationTitle = Math.floor(Math.random() * correctExplanationTitles.length);


  const handleAnswerClick = async (answer) => {
    if (selectedAnswer === answer) {
      setSelectedAnswer(null)
      selectionChanged()
      await storage.removeItem("selectedAnswer")
      return
    } else if (selectedAnswer) {
      setSelectedAnswer(answer)
      selectionChanged()
    } else {
      setSelectedAnswer(answer)
      notificationOccurred("success")
    }
  }

  const handleMainButtonClick = async () => {
    setShowExplanation(true);
  };

  const handleMainButtonClickAfterExplanation = async () => {
    navigate('/new-achievement');
  };

  useEffect(() => {
  }, []);


  return (
    <>
      {/*—Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ?*/}
      <BackButton onClick={() => navigate(-1)}/>
      {/*—Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ?*/}
      <div className="choose-item">
      <Header title="Python bot" className="header choose-item"/>
          <ReactMarkdown>
            {question}
          </ReactMarkdown>
          <CodeBlock
            codeString={codeString}
          >
          </CodeBlock>
        {!showExplanation ? (
          <main className="main_answer">
            <AnswerItem
              answerText="–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
              onClick={() => handleAnswerClick('A')}
              className={selectedAnswer === 'A' ? "answer_item answer_item--active" : "answer_item"}
            >
            </AnswerItem>
            <AnswerItem
              answerText="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞"
              onClick={() => handleAnswerClick('B')}
              className={selectedAnswer === 'B' ? "answer_item answer_item--active" : "answer_item"}
            >
            </AnswerItem>
            <AnswerItem
              answerText="–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª `myapp.log` —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
              onClick={() => handleAnswerClick('C')}
              className={selectedAnswer === 'C' ? "answer_item answer_item--active" : "answer_item"}
            >
            </AnswerItem>
            <AnswerItem
              answerText="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è `Formatter`"
              onClick={() => handleAnswerClick('D')}
              className={selectedAnswer === 'D' ? "answer_item answer_item--active" : "answer_item"}
            >
            </AnswerItem>
          </main>
          ) : (
          <ExplanationBlock
            explanation={explanation}
            title={correctExplanationTitles[randomCorrectExplanationTitle]}
            userAnswer="–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª `myapp.log` —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
          >
          </ExplanationBlock>
          )
        }
      </div>
        {selectedAnswer && (
          <MainButton
            text={showExplanation ? "–î–∞–ª–µ–µ" : `–û—Ç–≤–µ—Ç–∏—Ç—å ${selectedAnswer}`}
            onClick={showExplanation ? handleMainButtonClickAfterExplanation : handleMainButtonClick}
          />
        )}
    </>
  );
}

export default SolveQuestion
