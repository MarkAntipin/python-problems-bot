import random
from unittest.mock import Mock

import pytest

from src.services.advices import Advice
from src.services.leaders import Leader, UserInLeaders
from src.services.questions import Question
from src.utils.formaters import format_advice, format_explanation, format_leaders_message, format_question


def test_format_question() -> None:
    res = format_question(
        question=Question(
            id=1,
            text='text',
            answer='A',
            choices={'A': 1, 'B': 2},
            explanation='explanation'
        )
    )
    assert res == 'text\n\nA) 1\nB) 2'


@pytest.fixture
def test_question() -> Question:
    """A fixture for creating a test question object"""
    return Question(
        id=1,
        text='text',
        choices={'A': 1, 'B': 2},
        answer='A',
        explanation='explanation'
    )


def test_format_explanation__correct_answer(test_question: Question) -> None:
    """A test for the correct answer."""
    mock_choice = Mock(return_value="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üëç")
    random.choice = mock_choice
    user_answer = "A"
    is_correct = True
    expected_output = (
        "\ntext\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üëç\n"
        "<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> A) 1\n"
        "<b>–¢–≤–æ–π –≤—ã–±–æ—Ä:</b> A)\n"
        "<b> –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\nexplanation"
    )
    result = format_explanation(test_question, is_correct, user_answer)
    assert result == expected_output


def test_format_explanation__incorrect_answer(test_question: Question) -> None:
    """A test for the incorrect answer."""
    mock_choice = Mock(return_value="–£–ø—Å, –º–∏–º–æ! üôä")
    random.choice = mock_choice
    user_answer = "B"
    is_correct = False
    expected_output = (
        "\ntext\n"
        "–£–ø—Å, –º–∏–º–æ! üôä\n"
        "<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> A) 1\n"
        "<b>–¢–≤–æ–π –≤—ã–±–æ—Ä:</b> B)\n"
        "<b> –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\nexplanation"
    )
    result = format_explanation(test_question, is_correct, user_answer)
    assert result == expected_output


def test_format_advice() -> None:
    res = format_advice(
        advice=Advice(
            advice_id=1,
            theme='lists',
            level=1,
            link='https://python.com/useful_link_to_handle_with_lists'
        )
    )

    assert res == '–Ø –ø–æ–Ω—è–ª, —á—Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å —Ç–µ–º—É "lists".\n' \
                  '–í–æ—Ç <a href="https://python.com/useful_link_to_handle_with_lists">—Å—Å—ã–ª–∫–∞</a>\n' \
                  '–ü—Ä–æ—á—Ç–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –µ—â–µ –∫—Ä—É—á–µ!'


def test_format_leaders_message() -> None:
    leaders = [
        Leader(id=1, first_name='User1', username='user1', score=12),
        Leader(id=2, first_name='User2', username='user2', score=3),
        Leader(id=3, first_name='User3', username='user3', score=1),
    ]
    user_in_leaders = UserInLeaders(score=12, position=1)

    formatted_message = format_leaders_message(leaders=leaders, user_in_leaders=user_in_leaders)

    expected_message = (
        '<b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>\n'
        '1. <a href="https://t.me/user1">User1</a> - 12 –±–∞–ª–ª–æ–≤\n'
        '2. <a href="https://t.me/user2">User2</a> - 3 –±–∞–ª–ª–∞\n'
        '3. <a href="https://t.me/user3">User3</a> - 1 –±–∞–ª–ª\n'
        '\n'
        '<b>–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ:</b> 1. –í—ã –Ω–∞–±—Ä–∞–ª–∏ 12 –±–∞–ª–ª–æ–≤.'
    )
    assert formatted_message == expected_message


def test_format_leaders_message__user_not_found() -> None:
    leaders = [
        Leader(id=1, first_name='User1', username='user1', score=10),
        Leader(id=2, first_name='User2', username='user2', score=20),
        Leader(id=3, first_name='User3', username='user3', score=15),
    ]

    formatted_message = format_leaders_message(leaders=leaders, user_in_leaders=None)

    expected_message = (
        '<b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>\n'
        '1. <a href="https://t.me/user1">User1</a> - 10 –±–∞–ª–ª–æ–≤\n'
        '2. <a href="https://t.me/user2">User2</a> - 20 –±–∞–ª–ª–æ–≤\n'
        '3. <a href="https://t.me/user3">User3</a> - 15 –±–∞–ª–ª–æ–≤\n'
    )
    assert formatted_message == expected_message
